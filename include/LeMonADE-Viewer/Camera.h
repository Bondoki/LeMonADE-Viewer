/*--------------------------------------------------------------------------------
 _______________
|   /       \   | L   attice-based  | LeMonADE-Viewer:
|  /   ooo   \  | e   xtensible     | ----------------
| /  o\.|./o  \ | Mon te-Carlo      | An Open Source Visualization Tool for
|/  o\.\|/./o  \| A   lgorithm and  | for BFM-files generated by LeMonADE-software.
|  oo---0---oo  | D   evelopment    | See: https://github.com/LeMonADE-project/LeMonADE
|\  o/./|\.\o  /| E   nvironment    |
| \  o/.|.\o  / | -                 |
|  \   ooo   /  | Viewer            | Copyright (C) 2013-2015 by
|___\_______/___|                   | LeMonADE-Viewer Principal Developers (see AUTHORS)
----------------------------------------------------------------------------------

This file is part of LeMonADE-Viewer.

LeMonADE-Viewer is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

LeMonADE-Viewer is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with LeMonADE-Viewer.  If not, see <http://www.gnu.org/licenses/>.

--------------------------------------------------------------------------------*/

#ifndef LEMONADE_VIEWER_CAMERA_H
#define LEMONADE_VIEWER_CAMERA_H

#include "SDL/SDL_opengl.h"
#include <math.h>



class Camera {
  
public:
  Camera();
  virtual ~Camera();
  
  GLfloat getCamXPos() const;
  GLfloat getCamYPos() const;
  GLfloat getCamZPos() const;
  
  GLfloat getCamPhiRot() const;
  GLfloat getCamThetaRot() const;
  
  GLfloat getCamThetaRotAxisX() const;
  GLfloat getCamThetaRotAxisZ() const;
 
  GLfloat getCamXSpeed() const;
  GLfloat getCamYSpeed() const;
  GLfloat getCamZSpeed() const;
  
  GLfloat getMovementSpeedFactor() const;
  
  bool getHoldingForwardI() const;
  bool getHoldingBackwardO() const;
  bool getHoldingUpW() const;
  bool getHoldingDownS() const;
  bool getHoldingLeftA() const;
  bool getHoldingRightD() const;
  
  bool getHoldingMouseButtonLeft() const;
  
  GLfloat getHoldingForwardMouse () const;
  GLfloat getHoldingBackwardMouse () const;
  
  
  
  void setCamXPos(GLfloat camXPosParam = 0.0f);
  void setCamYPos(GLfloat camYPosParam = 0.0f);
  void setCamZPos(GLfloat camZPosParam = 0.0f);

  void setCamPhiRot(GLfloat camPhiRotParam = 0.0f);
  void setCamThetaRot(GLfloat camThetaRotParam = 0.0f);
  
  void setCamPhiRotSpeed(GLfloat camPhiRotSpeedParam = 0.0f);
  void setCamThetaRotSpeed(GLfloat camThetaRotSpeedParam = 0.0f);

  void setCamThetaRotAxisX(GLfloat camThetaRotAxisXParam = 1.0f);
  void setCamThetaRotAxisZ(GLfloat camThetaRotAxisZParam = 0.0f);
  
  void setCamXSpeed(GLfloat camXSpeedParam = 0.0f);
  void setCamYSpeed(GLfloat camYSpeedParam = 0.0f);
  void setCamZSpeed(GLfloat camZSpeedParam = 0.0f);
  
  void setMovementSpeedFactor(GLfloat movementSpeedFactorParam = 1.0f);
  
  void setHoldingForwardI(bool holdingForwardIParam = false);
  void setHoldingBackwardO(bool holdingBackwardOParam = false);
  void setHoldingUpW(bool holdingUpWParam = false);
  void setHoldingDownS(bool holdingDownSParam = false);
  void setHoldingLeftA(bool holdingLeftAParam = false);
  void setHoldingRightD(bool holdingRightDParam = false);
  
  void setHoldingMouseButtonLeft(bool holdingMouseButtonLeftParam = false);
  
  void setHoldingForwardMouse(GLfloat holdingForwardMouseParam = 0.0f);
  void setHoldingBackwardMouse(GLfloat holdingBackwardMouseParam = 0.0f);
  
  void calculateCameraMovement();
  void moveCamera();
  void handleMouseMove(int, int, GLint, GLint, GLint);
  
  float toRads(const float);
  
private:
  
  GLfloat camXPos;
  GLfloat camYPos;
  GLfloat camZPos;
  
  GLfloat camPhiRot;
  GLfloat camThetaRot;
  
  GLfloat camThetaRotAxisX;
  GLfloat camThetaRotAxisZ;

  GLfloat camXSpeed;
  GLfloat camYSpeed;
  GLfloat camZSpeed;
  
  GLfloat camPhiRotSpeed;
  GLfloat camThetaRotSpeed;

  GLfloat movementSpeedFactor;		
  
  bool holdingForwardI;
  bool holdingBackwardO;
  bool holdingUpW;
  bool holdingDownS;
  bool holdingLeftA;
  bool holdingRightD;
  
  bool holdingMouseButtonLeft;
  
  GLfloat holdingForwardMouse;
  GLfloat holdingBackwardMouse;
  
  
};

#endif
